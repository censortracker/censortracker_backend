stages:
  - deploy

# TODO:
  # 1) moving from docker runner to shell runner will fasten deploy a bit
  # 2) FIND THE TIME TO MOVE TO INCLUDE-BASED DEPLOY SCRIPTS, TO DON'T REWRITE THEM PER-PROJECT!!!

Deploy:
  image: alpine:latest
  stage: deploy
  tags:
    - docker
  before_script:
    - |
      if [[ "${CI_COMMIT_REF_NAME}" == "prod" ]]; then
        export DJANGO_ENV="production"
      else
        export DEV="dev-"
        export DJANGO_ENV="development"
      fi
      export stk="${DEV}${CI_PROJECT_NAME//./-}"
      export ENVPREF="${stk//-/_}"
      export PROJECT="${ENVPREF//_/.}"
    - mkdir -p dist
    - cp -r poetry.lock pyproject.toml lua server manage.py dist
    # ^ tests
    - ln -s ../public dist/public
  script:
    - apk add tar zstd openssh-client
    - mkdir -p ~/.ssh
    - base64 -d "${SSH_KEY}" > ~/.ssh/key
    - chmod 600 ~/.ssh/key
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\tIdentityFile ~/.ssh/key\n\tUser www-data\n\tPort 55222\n\n" > ~/.ssh/config
    - env | grep -E '^(PROJECT|DJANGO_ENV)' | ssh "${CLOUD_DEPLOY_HOST}" setenv "name:${stk}"
    - cd dist; tar -cf- . | zstd --fast | ssh "${CLOUD_DEPLOY_HOST}" deploy "name:${stk}" "sha:${CI_COMMIT_SHORT_SHA}"
    - echo 'poetry install --no-interaction --no-ansi' | ssh "${CLOUD_DEPLOY_HOST}" maint "name:${stk}"
    - echo 'manage migrate --noinput' | ssh "${CLOUD_DEPLOY_HOST}" maint "name:${stk}"
    - echo 'manage collectstatic --noinput' | ssh "${CLOUD_DEPLOY_HOST}" maint "name:${stk}"
    - echo 'update-unit' | ssh "${CLOUD_DEPLOY_HOST}" maint "name:${stk}"
  only:
    - prod@web/dj/censortracker
    - dev@web/dj/censortracker
