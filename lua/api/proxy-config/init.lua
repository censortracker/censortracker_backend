-- luacheck: globals ngx
local root = ngx.var.document_root;
local dict_name = ngx.var.ct_srv_dict;
local servers = ngx.shared[dict_name];
local list, upts;

local cjson = cjson or require"cjson" -- luacheck: globals cjson

local ts = ngx.time()
list = servers:get"list"
upts = servers:get"upts"

math.randomseed(ts)

-- TODO: –ø—Ä–∏—á–µ—Å–∞—Ç—å —ç—Ç–æ –≤—Å—ë –∏ —Ä–∞–∑–ª–æ–∂–∏—Ç—å –ø–æ —Å—É–±–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º, —á—Ç–æ–±—ã –±—ã–ª–∞ –±–æ–ª–µ–µ –º–æ–¥—É–ª—å–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –∫–æ–¥

local function fallback(reason)
	-- TODO: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–µ–ª–µ–≥—É –∏ —Å–ª–∞–∫
	local _ = reason -- TODO: –ø—Ä–∏—á–∏–Ω–∞ —Ñ–µ–π–ª–∞ (–¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–µ–ª–µ–≥—É –∏ —Å–ª–∞–∫)
	ngx.status=500
	ngx.header.Content_Type = "application/json";

	ngx.print(("%s"):format(
		cjson.encode(
			{ -- —Ñ–æ–ª–ª–±–µ–∫
				server="proxy-fallback.censortracker.org",
				port="33333",
				pingHost="proxy-fallback.censortracker.org",
				pingPort="39263",
				fallbackReason=reason,
			}
		)
	))

	ngx.exit(500)
end


if -- –µ—Å–ª–∏
	not(list) or -- –Ω–µ—Ç –∫–µ—à–∞ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–ª–∏
	not(upts) or -- –Ω–µ—Ç —Ç–∞–π–º—à—Ç–∞–º–ø–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–ª–∏
	( ( tonumber(upts) + 20 ) < ts ) -- —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω –±–æ–ª—å—à–µ 20 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥
then
	local fd, _ =io.open(root.."/public/api/proxy/list/index.json","r")
	if not(fd) then -- –µ—Å–ª–∏ –≤—Å—ë —Å–ª–æ–º–∞–ª–æ—Å—å (—Ñ–∞–π–ª –Ω–µ —Å–º–æ–≥ –æ—Ç–∫—Ä—ã—Ç—å—Å—è).
		-- –í–æ–æ–±—â–µ, —Ç–∞–∫–æ–≥–æ, –ø–æ –∏–¥–µ–µ, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ, —Ñ–∞–π–ª-—Ç–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–π.
		-- –†–∞–∑–≤–µ —á—Ç–æ –µ—Å–ª–∏ –ø–æ–≤—Ä–µ–¥–∏—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∏—Å–∫–∞ ü§∑
		fallback("noList")
	end

	list = fd:read"a*"
	fd:close()

	if #list<10 then fallback("brokenList") end

	servers:set("list",list)
	servers:set("upts",ts)
end

local excluded = {}
local query = ngx.req.get_uri_args();
local exc = query.exclude
if exc then
	if type(exc) == "string" then
		excluded[exc] = true
	elseif type(exc) == "table" then
		for _,v in ipairs(exc) do
			excluded[v] = true
		end
	end
end

--[[
local function contains(t,w)
	for _,v in ipairs(t) do
		if v == w then return true end
	end
	return false
end
 ]]

-- –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
local proxies = cjson.decode(list)
local randlist = {}
for _,v in ipairs(proxies) do
	if v.active and not(excluded[v.server]) then
		local w = v.weight;
		for _=1,w do
			v.weight = nil
			v.active = nil
			table.insert(randlist, v)
		end
	end
end

if #randlist == 0 then fallback("noMore") end

-- –û—Ç–≤–µ—Ç
ngx.status = 200
ngx.header.Content_Type = "application/json";

local ret = randlist[math.random(#randlist)]
ret.excludedServers = #excluded>0 and excluded

ngx.print(("%s"):format(cjson.encode(ret)))
ngx.exit(ngx.status)
